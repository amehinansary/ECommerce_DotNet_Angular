{"version":3,"file":"common.fd3f7f0cbf9030ab.js","mappings":"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","names":["i0","BasketSummaryComponent","constructor","this","EventEmitter","ngOnInit","decrementItemQuantity","item","decrement","emit","incrementItemQuantity","increment","removeBasketItem","remove","selectors","OrderTotalsComponent","TextInputComponent","controlDir","valueAccessor","control","asyncValidators","asyncValidator","setValidators","validator","setAsyncValidators","updateValueAndValidity","onChange","event","onTouched","writeValue","obj","input","nativeElement","value","registerOnChange","fn","registerOnTouched","ctx"],"sourceRoot":"webpack:///","sources":["./src/app/shared/components/basket-summary/basket-summary.component.html","./src/app/shared/components/basket-summary/basket-summary.component.ts","./src/app/shared/components/order-totals/order-totals.component.ts","./src/app/shared/components/order-totals/order-totals.component.html","./src/app/shared/components/text-input/text-input.component.html","./src/app/shared/components/text-input/text-input.component.ts"],"sourcesContent":["<ng-container *ngIf=\"items.length > 0\">\n  <div class=\"table-responsive\">\n    <table class=\"table table-borderless\">\n      <thead [class.table-light]=\"isBasket || isOrder\" class=\"border-0 py-2\">\n        <tr>\n          <th scope=\"col\">\n            <div class=\"p-2 px-3 text-uppercase\">Product</div>\n          </th>\n          <th scope=\"col\">\n            <div class=\"py-2 text-uppercase\">Price</div>\n          </th>\n          <th scope=\"col\">\n            <div class=\"py-2 text-uppercase\">Quantity</div>\n          </th>\n          <th scope=\"col\">\n            <div class=\"py-2 text-uppercase\">Total</div>\n          </th>\n          <th *ngIf=\"isBasket\" scope=\"col\" class=\"border-0\">\n            <div class=\"py-2 text-uppercase\">Remove</div>\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr *ngFor=\"let item of items\">\n          <th scope=\"row\">\n            <div class=\"p-2\">\n              <img\n                src=\"{{ item.pictureUrl }}\"\n                alt=\"{{ item.productName }}\"\n                class=\"img-fluid\"\n                style=\"max-height: 50px\"\n              />\n              <div class=\"ms-3 d-inline-block align-middle\">\n                <h5 class=\"mb-0\">\n                  <a routerLink=\"/shop/{{ item.id }}\" class=\"text-dark\">{{\n                    item.productName\n                  }}</a>\n                </h5>\n                <span\n                  *ngIf=\"item.type\"\n                  class=\"text-muted font-weight-normal font-italic d-block\"\n                  >Type: {{ item.type }}</span\n                >\n              </div>\n            </div>\n          </th>\n          <td class=\"align-middle\">\n            <strong>{{ item.price | currency }}</strong>\n          </td>\n          <td class=\"align-middle\">\n            <div\n              class=\"d-flex align-items-center\"\n              [class.justify-content-center]=\"!isBasket\"\n            >\n              <i\n                *ngIf=\"isBasket\"\n                (click)=\"decrementItemQuantity(item)\"\n                class=\"fa fa-minus-circle text-warning me-2\"\n                style=\"cursor: pointer; font-size: 2em\"\n              ></i>\n              <span class=\"font-weight-bold\" style=\"font-size: 1.5em\">\n                {{ item.quantity }}\n              </span>\n              <i\n                *ngIf=\"isBasket\"\n                (click)=\"incrementItemQuantity(item)\"\n                class=\"fa fa-plus-circle text-warning mx-2\"\n                style=\"cursor: pointer; font-size: 2em\"\n              ></i>\n            </div>\n          </td>\n          <td class=\"align-middle\">\n            <strong>{{ item.price * item.quantity | currency }}</strong>\n          </td>\n          <td class=\"align-middle text-center\">\n            <a class=\"text-danger\">\n              <i\n                *ngIf=\"isBasket\"\n                (click)=\"removeBasketItem(item)\"\n                class=\"fa fa-trash\"\n                style=\"font-size: 2em; cursor: pointer\"\n              ></i>\n            </a>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</ng-container>\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { IBasketItem } from '../../models/basket';\nimport { IOrderItem } from '../../models/order';\n\n@Component({\n  selector: 'app-basket-summary',\n  templateUrl: './basket-summary.component.html',\n  styleUrls: ['./basket-summary.component.scss']\n})\nexport class BasketSummaryComponent implements OnInit {\n  @Output() decrement: EventEmitter<IBasketItem> = new EventEmitter<IBasketItem>();\n  @Output() increment: EventEmitter<IBasketItem> = new EventEmitter<IBasketItem>();\n  @Output() remove: EventEmitter<IBasketItem> = new EventEmitter<IBasketItem>();\n  @Input() isBasket = true;\n  @Input() items: any;//IBasketItem[] | IOrderItem[] = []\n  @Input() isOrder = false;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  decrementItemQuantity(item: IBasketItem) {\n    this.decrement.emit(item);\n  }\n\n  incrementItemQuantity(item: IBasketItem) {\n    this.increment.emit(item);\n  }\n\n  removeBasketItem(item: IBasketItem) {\n    this.remove.emit(item);\n  }\n\n}\n","import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-order-totals',\n  templateUrl: './order-totals.component.html',\n  styleUrls: ['./order-totals.component.scss']\n})\nexport class OrderTotalsComponent implements OnInit {\n  @Input() shippingPrice = 0;\n  @Input() subtotal = 0;\n  @Input() total = 0;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"bg-light px-4 text-uppercase font-weight-bold\" style=\"padding: 1.20em;\">\n  Order Summary\n</div>\n<div class=\"p-4\">\n  <p class=\"font-italic mb-4\">Shipping costs will be added depending on choices made during checkout</p>\n  <ul class=\"list-unstyled mb-4\">\n    <li class=\"d-flex justify-content-between py-3 border-bottom\">\n      <strong class=\"text-muted\">Order subtotal</strong>\n      <strong>{{subtotal | currency}}</strong>\n    </li>\n    <li class=\"d-flex justify-content-between py-3 border-bottom\">\n      <strong class=\"text-muted\">Shipping and handling</strong>\n      <strong>{{shippingPrice | currency}}</strong>\n    </li>\n    <li class=\"d-flex justify-content-between py-3 border-bottom\">\n      <strong class=\"text-muted\">Total</strong>\n      <strong>{{total | currency}}</strong>\n    </li>\n  </ul>\n</div>\n","<div class=\"form-label-group\">\n  <input [ngClass]=\"(controlDir.control?.touched)\n            ? !controlDir.control?.valid ? 'is-invalid' : 'is-valid' : null\" [type]=\"type\"\n    (input)=\"onChange($any($event.target).value)\" (blur)=\"onTouched()\" #input class=\"form-control\"\n    placeholder=\"{{label}}\">\n\n  <div *ngIf=\"controlDir?.control?.status === 'PENDING'\" class=\"fa fa-spinner fa-spin loader\"></div>\n\n  <label for=\"{{label}}\">{{label}}</label>\n\n  <div class=\"invalid-feedback\" *ngIf=\"(!controlDir?.control?.valid && controlDir?.control?.touched)\">\n    <span *ngIf=\"controlDir.control?.errors?.['required']\">{{label}} is required</span>\n    <span *ngIf=\"controlDir.control?.errors?.['pattern']\">Invalid email address</span>\n  </div>\n\n  <div class=\"invalid-feedback d-block\" *ngIf=\"(!controlDir?.control?.valid && controlDir?.control?.dirty)\">\n    <span *ngIf=\"controlDir.control?.errors?.['emailExists']\">Email address is in use</span>\n  </div>\n</div>\n","import { Component, ElementRef, Input, OnInit, Self, ViewChild } from '@angular/core';\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-text-input',\n  templateUrl: './text-input.component.html',\n  styleUrls: ['./text-input.component.scss']\n})// to access the form control value we gonna implement CVAcc\nexport class TextInputComponent implements OnInit, ControlValueAccessor {\n  // to get access to that native element (input) we need @ViewChild\n  @ViewChild('input', { static: true }) input!: ElementRef;\n  @Input() type = 'text';\n  @Input() label = 'string';\n  // to get access to the validation we need to inject the ControlValueAccessor itself\n  // NgControl is what our FormControl derives from.\n  constructor(@Self() public controlDir: NgControl) {\n    this.controlDir.valueAccessor = this;\n  }\n\n  ngOnInit(): void {\n    const control = this.controlDir.control!;\n    const validators = control.validator ? [control.validator] : [];\n    const asyncValidators = control.asyncValidator ? [control.asyncValidator] : [];\n\n    control.setValidators(validators);\n    control.setAsyncValidators(asyncValidators);\n    control.updateValueAndValidity();// validate our form on intialization\n  }\n\n  onChange(event: any) { }\n\n  onTouched() { }\n\n  // required\n  writeValue(obj: any): void {\n    this.input.nativeElement.value = obj || '';\n  }\n\n  registerOnChange(fn: any): void {// fn => the value we get from the ControlValueAccessor\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n}\n"],"x_google_ignoreList":[]}